import os
import logging
import random
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# üîπ API Token from BotFather
TOKEN = os.getenv('TELEGRAM_BOT_API_KEY')

# üîπ Load Excel files
df = pd.read_excel("/app/questions.xlsx", engine="openpyxl")  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
df_yaroslavl = pd.read_excel("/app/questions_Yaroslavl.xlsx", engine="openpyxl")  # –Ø—Ä–æ—Å–ª–∞–≤–ª—å

# üîπ Fill missing values
df = df.fillna("-")
df_yaroslavl = df_yaroslavl.fillna("-")

# üîπ Convert to list of dicts
all_questions = df.to_dict(orient="records")
all_yaroslavl = df_yaroslavl.to_dict(orient="records")

# üîπ Logging config
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.WARNING
)

user_data = {}

async def start(update: Update, context: CallbackContext) -> None:
    """Start command: prompts city selection"""
    user_id = update.message.chat_id
    keyboard = [["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"], ["–Ø—Ä–æ—Å–ª–∞–≤–ª—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç:", reply_markup=reply_markup)

async def quiz(update: Update, context: CallbackContext) -> None:
    """Sends a question"""
    user_id = update.message.chat_id

    if user_id not in user_data or "questions" not in user_data[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    user_info = user_data[user_id]

    if user_info["current_question"] >= len(user_info["questions"]):
        score = user_info["score"]
        keyboard = [["üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
            f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –¢—ã –Ω–∞–±—Ä–∞–ª {score} –∏–∑ 25 –±–∞–ª–ª–æ–≤.\n\n–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?",
            reply_markup=reply_markup
        )
        return

    question_index = user_info["current_question"]
    question = user_info["questions"][question_index]
    user_info["current_question"] += 1

    context.user_data["current_question"] = question

    options = [(k, str(v)) for k, v in question.items() if k.startswith("–í–∞—Ä–∏–∞–Ω—Ç") and str(v).strip() != "-"]
    random.shuffle(options)

    context.user_data["shuffled_options"] = [val.lower().strip() for _, val in options]

    keyboard = [[val] for _, val in options]
    keyboard.append(["üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"])  # Add end test button

    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(question["–í–æ–ø—Ä–æ—Å"], reply_markup=reply_markup)

async def answer(update: Update, context: CallbackContext) -> None:
    user_id = update.message.chat_id
    text = update.message.text.strip()

    if text == "üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ":
        user_data.pop(user_id, None)
        context.user_data.clear()
        await start(update, context)
        return

    if text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç":
        await quiz(update, context)
        return

    if text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç":
        score = user_data[user_id]["score"]
        keyboard = [["üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
            f"üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –¥–æ—Å—Ä–æ—á–Ω–æ! –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ 25.",
            reply_markup=reply_markup
        )

        context.user_data.clear()
        return

    if user_id not in user_data:
        if text in ["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å"]:
            selected_questions = all_questions if text == "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" else all_yaroslavl
            selected_questions = [
                q for q in selected_questions
                if any(str(q.get(k)).strip() != "-" for k in q if k.startswith("–í–∞—Ä–∏–∞–Ω—Ç"))
            ]
            if not selected_questions:
                await update.message.reply_text("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            context.user_data.clear()
            user_data[user_id] = {
                "city": text,
                "score": 0,
                "current_question": 0,
                "questions": random.sample(selected_questions, min(len(selected_questions), 25))
            }

            keyboard = [["‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

            await update.message.reply_text(
                f"‚úÖ –ì–æ—Ä–æ–¥ {text} –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.",
                reply_markup=reply_markup
            )
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            return

    if "current_question" not in context.user_data or "shuffled_options" not in context.user_data:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start –∏ –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")
        return

    question = context.user_data["current_question"]
    correct_answer = str(question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç)"]).strip().lower()
    user_answer = text.strip().lower()

    if user_answer == correct_answer:
        user_data[user_id]["score"] += 1
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç)']}")

    await quiz(update, context)

async def stats(update: Update, context: CallbackContext) -> None:
    user_id = update.message.chat_id
    if user_id in user_data:
        score = user_data[user_id]["score"]
        await update.message.reply_text(f"üìä –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ 25.")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª —Ç–µ—Å—Ç. –ù–∞–ø–∏—à–∏ /start!")

def main():
    print("üîπ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer))

    print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()
