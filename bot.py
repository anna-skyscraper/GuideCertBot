import os
import logging
import random
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# üîπ –í—Å—Ç–∞–≤—å —Å–≤–æ–π API-—Ç–æ–∫–µ–Ω –æ—Ç @BotFather
TOKEN = os.getenv('TELEGRAM_BOT_API_KEY')

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
file_path = "questions.xlsx"
df = pd.read_excel("/app/questions.xlsx", engine="openpyxl")

# üîπ –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NaN
df = df.fillna("-")

# üîπ –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
print("–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ñ–∞–π–ª–µ:", df.columns.tolist())

# üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
all_questions = df.to_dict(orient="records")

# üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.WARNING  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
)

# üîπ –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def start(update: Update, context: CallbackContext) -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    user_id = update.message.chat_id
    user_data[user_id] = {"score": 0, "current_question": 0, "questions": random.sample(all_questions, 35)}
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")

async def quiz(update: Update, context: CallbackContext) -> None:
    """–í—ã–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = update.message.chat_id

    if user_id not in user_data:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")
        return

    user_info = user_data[user_id]
    
    if user_info["current_question"] >= len(user_info["questions"]):
        # üîπ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ"
        score = user_info["score"]
        keyboard = [["üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –¢—ã –Ω–∞–±—Ä–∞–ª {score} –∏–∑ 35 –±–∞–ª–ª–æ–≤.\n\n–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?", reply_markup=reply_markup)
        return

    question = user_info["questions"][user_info["current_question"]]
    user_info["current_question"] += 1  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data["current_question"] = question  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å

    # üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–∏
    options = [str(question["–í–∞—Ä–∏–∞–Ω—Ç 1"]), str(question["–í–∞—Ä–∏–∞–Ω—Ç 2"]), str(question["–í–∞—Ä–∏–∞–Ω—Ç 3"])]

    # üîπ –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)
    keyboard = [[options[0]], [options[1]], [options[2]]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(question["–í–æ–ø—Ä–æ—Å"], reply_markup=reply_markup)

async def answer(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.chat_id
    text = update.message.text.strip().lower()  # üîπ –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    if text == "üîÑ –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ":
        await start(update, context)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        return

    if "current_question" not in context.user_data:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")
        return

    question = context.user_data["current_question"]
    correct_answer = str(question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç)"]).strip().lower()  # üîπ –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—á–∏—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

    if text == correct_answer:
        user_data[user_id]["score"] += 1
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç)']}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await quiz(update, context)

async def stats(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.chat_id
    if user_id in user_data:
        score = user_data[user_id]["score"]
        await update.message.reply_text(f"üìä –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ 35.")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª —Ç–µ—Å—Ç. –ù–∞–ø–∏—à–∏ /quiz!")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üîπ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # üîπ –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç—ã —Å bot API –≤ –≤–µ—Ä—Å–∏–∏ 20+
    app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("quiz", quiz))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer))

    print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
